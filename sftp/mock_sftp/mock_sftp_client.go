// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-go-kit/sftp (interfaces: SFTPClient)

// Package mock_sftp is a generated GoMock package.
package mock_sftp

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSFTPClient is a mock of SFTPClient interface.
type MockSFTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockSFTPClientMockRecorder
}

// MockSFTPClientMockRecorder is the mock recorder for MockSFTPClient.
type MockSFTPClientMockRecorder struct {
	mock *MockSFTPClient
}

// NewMockSFTPClient creates a new mock instance.
func NewMockSFTPClient(ctrl *gomock.Controller) *MockSFTPClient {
	mock := &MockSFTPClient{ctrl: ctrl}
	mock.recorder = &MockSFTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSFTPClient) EXPECT() *MockSFTPClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSFTPClient) Create(arg0 string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSFTPClientMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSFTPClient)(nil).Create), arg0)
}

// Open mocks base method.
func (m *MockSFTPClient) Open(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockSFTPClientMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSFTPClient)(nil).Open), arg0)
}

// Remove mocks base method.
func (m *MockSFTPClient) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSFTPClientMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSFTPClient)(nil).Remove), arg0)
}
